#!/bin/sh --
set -ue; export POSIXLY_CORRECT=1
# Made by Jumps Are Op (jumpsareop@gmail.com)
# This software is under GPL version 3 and comes with ABSOLUTELY NO WARRANTY

alias p='printf %s' echo='printf %s\\n'

main(){
	all= thirds= next= nocache= clearcache= cachelocation=
	while getopts hatncClm: OPT;do
		case $OPT in
			a)all=1;; t)thirds=1;; n)next=1;; c)nocache=1;; C)clearcache=1;;
			l)cachelocation=1;;
			m)method=$OPTARG;;
			*)dishelp;;
		esac
	done; shift $((OPTIND-1))

	cachedir=${XDG_CACHE_HOME:-${HOME:-.}/.cache}/whensalat
	[ "$clearcache" ] && rm -rf -- "$cachedir"
	[ ! "$nocache" ] && mkdir -p -- "$cachedir"

	# Get current location
	if [ "$cachelocation" ] && [ -f "$cachedir/cached_location" ] &&
			[ -r "$cachedir/cached_location" ];then
		loc=$(cat -- "$cachedir/cached_location")
	else
		loc=$(curl -Ss ipinfo.io | jq '.loc') || true
		if [ ! "$loc" ] || [ "$loc" = null ];then
			echo "Failed to get your location (connection issue?)." >&2
			exit 1
		fi
		[ ! "$nocache" ] && echo "$loc" >"$cachedir/cached_location"
	fi
	longitude=${loc#*,} longitude=${longitude%\"}
	latitude=${loc%,*} latitude=${latitude#\"}

	year=$(date +%Y) month=$(date +%m) day=$(date +%d)
	month=${month#0} day=${day#0}
	BASEURL=https://api.aladhan.com/v1/calendar/$year/$month
	REST_ARGS=longitude=$longitude\&latitude=$latitude${method+&method=$method}

	if [ ! "$nocache" ];then
		cachefile=$cachedir/${longitude}_$latitude
		touch -- "$cachefile"

		# Get last month cache was written and check if it's still valid
		read -r lastmodificationmonth <"$cachefile" || true
		[ "$lastmodificationmonth" != "$month" ] && cat >"$cachefile" <<-EOF
			$month
			$(curl -Ss "$BASEURL?$REST_ARGS&month=$month&year=$year")
		EOF
		data=$(tail -n +2 <"$cachefile")
	else
		data=$(curl -Ss "$BASEURL?$REST_ARGS&month=$month&year=$year")
	fi

	getsalattimefromjsontimings "$(p "$data" |
		jq ".data[$((day-1))].timings")"

	# shellcheck disable=SC2154
	[ "$next$#" = 0 ] && {
		# A "small" hack to add spaces
		{ [ "$all" ] && all=;} || unset all
		{ [ "$thirds" ] && thirds=;} || unset thirds
		cat <<EOF ; exit 0
${all+Imsak:   ${thirds+  } $Imsak
}Fajr:   ${all+ }${all-${thirds+ }}${thirds+  } $Fajr
Sunrise:${all+ }${all-${thirds+ }}${thirds+  } $Sunrise
Dhuhr:  ${all+ }${all-${thirds+ }}${thirds+  } $Dhuhr
Asr:    ${all+ }${all-${thirds+ }}${thirds+  } $Asr
${all+Sunset:  ${thirds+  } $Sunset
}Maghrib:${all+ }${all-${thirds+ }}${thirds+  } $Maghrib
Isha:   ${all+ }${all-${thirds+ }}${thirds+  } $Isha${all+
}${all-${thirds+
}}${thirds+Firstthird: $Firstthird
}${all+Midnight:${thirds+  } $Midnight${thirds+
}}${thirds+Lastthird:  $Lastthird}
EOF
	}

	for salat;do
		case $(p "$salat" | tr '[:upper:]' '[:lower:]') in
			imsak)${all:+echo "$Imsak"};;
			fajr)echo "$Fajr";;
			sunrise)echo "$Sunrise";;
			dhuhr)echo "$Dhuhr";;
			asr)echo "$Asr";;
			sunset)${all:+echo "$Sunset"};;
			maghrib)echo "$Maghrib";;
			isha)echo "$Isha";;
			firstthird)${thirds:+echo "$Firstthird"};;
			midnight)${all:+echo "$Midnight"};;
			lastthird)${thirds:+echo "$Lastthird"};;
		esac
	done
	[ $# != 0 ] && exit 0

	hour=$(date +%H) minute=$(date +%M)

	# Note: to this to work, times need to be in this order
	# (starting from 00:00)
	# Midnight Lastthird Imsak Fajr Sunrise Dhuhr Asr Sunset Maghrib
	# Isha Firstthird
	# Note: If Sunset and Maghrib are the same time, Maghrib will be displayed.
	for salatname in ${all:+Midnight} ${thirds:+Lastthird} ${all:+Imsak} \
		Fajr Sunrise Dhuhr Asr ${all:+Sunset} Maghrib Isha \
		${thirds:+Firstthird};do
		eval salattime="\$$salatname"
		salathour=${salattime%%:*} salatminute=${salattime##*:}

		[ "$hour" -lt "$salathour" ] ||
		{ [ "$hour" = "$salathour" ] && [ "$minute" -lt "$salatminute" ];} && {
			[ "$salatname" = Sunset ] && [ "$Sunset" = "$Maghrib" ] &&
				salatname=Maghrib
			echo "$salatname $salathour:$salatminute"
			exit 0
		}
	done
	# If non of the above check, then It's the first time in the list
	# (Midnight/Lastthird/Fajr)
	[ "$all" ] && { echo "Midnight $Midnight"; exit 0;}
	echo "${thirds:+Lastthird $Lastthird}${thirds:-Fajr $Fajr}"

}

# This function have bad naming
# Get salat time from json timings
getsalattimefromjsontimings(){
	oldIFS=$IFS IFS='" '
	for time in Imsak Fajr Sunrise Dhuhr Asr Sunset Maghrib \
		Isha Firstthird Midnight Lastthird;do
		read -r _ "${time?}" _
	done <<-EOF
		$(p "$1" | jq ".Imsak, .Fajr, .Sunrise, .Dhuhr, .Asr, .Sunset,
			.Maghrib, .Isha, .Firstthird, .Midnight, .Lastthird")
	EOF
	IFS=$oldIFS
}

dishelp(){
	cat >&2 <<"EOF"
whensalat  Know your praying times from the terminal
Copyright (C) 2023  Jump are op (jumpsareop@gmail.com)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

USAGE: whensalat [OPTIONS] [SALATNAME]

OPTIONS:
	-n  Print next salat (times with -a and -t is included when specified)
	-a  Also display Imsak, Midnight, and Sunset times
	-t  Also display Firstthird and Lastthird times
	-l  Use last cached location (see CACHING)
	-c  Ignored cached salat times (see CACHING)
	-C  Clear cached salat times and location (see CACHING)
	-m  Set method
	   (see method section in https://aladhan.com/prayer-times-api#GetCalendar)

SALATNAME:
	Name of the salat to print.
	If not specified and -n also not specified, then will print all salats.

CACHING:
	By default salat times and your location are cached,
	but only salat times cache is used.
	If you want to use your last cached location, use `-l'.
	If you want to only ignore cached times without deleting them, use `-c'.
	If you want to clear all cached data, use `-C'.

	EXAMPLES:
	$ whensalat
	Will try to find your location (even if it's already cached),
	then cache it. Then will use cached salat times,
	if they are already cached and still valid,
	else will download it and cache it.

	$ whensalat -C
	Same as before, except delete all cache before doing anything.

	$ whensalat -c
	Same as the first one, except ignore salat times cache.

	$ whensalat -l
	Same as the first one, except use last cached loction (if exist).

	$ whensalat -cl
	Same as the first one, except ignore salat times cache,
	and use last cached loction (if exist).
EOF
	exit 1
}

main "$@"
